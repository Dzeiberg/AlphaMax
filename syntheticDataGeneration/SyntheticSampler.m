classdef SyntheticSampler < Sampler & handle
   properties
      params
      numParamSets
      instancesPerSet
      instance
      set
   end
   methods
       function obj = SyntheticSampler(paramFilePath,varargin)
           % SyntheticSampler - Manage sampling from distributions
           % generated in sampleDistribution parameters
           %
           %
           % Required Arguments:
           %   paramFilePath: .mat file containing parameters generated by
           %   sampleDistributionParameters.m
           %
           % Properties
           %    params : struct of parameters to sampling distributions
           %    numParamSets : number of pairs of positive/negative beta
           %    distributions
           %    instancesPerSet : number of pairs of
           %    alpha/mixtureSizes/componentSizes for each distribution
           %    pair
           %    set : distribution pair to next generate from
           %    instance : which instance to next generate
           %
           % See also: sampleDistributionParameters.m
           %           sampleBetaDistributions.m
           %
           % Author: Daniel Zeiberg
           % Email: zeiberg.d@northeastern.edu
           % Website: dzeiberg.github.io
           % Nov 2020; Last Revision: 16-Nov-2020
           
           % Header template adapted from: 
           % Denis Gilbert (2020). M-file Header Template (https://www.mathworks.com/matlabcentral/fileexchange/4908-m-file-header-template), MATLAB Central File Exchange. Retrieved November 16, 2020.
           % ------------ Parse and Validate Parameters -----
           obj.params = load(paramFilePath,"-mat",'params');
           obj.params = obj.params.params;
           obj.numParamSets = size(obj.params.a0,1);
           obj.instancesPerSet = size(obj.params.alphas,2);
           obj.instance = 1;
           obj.set = 1;
       end
       
       function [positiveSample, mixtureSample] = getSample(obj)
           positiveSample = betarnd(obj.params.a1(obj.set),...
                                    obj.params.b1(obj.set),...
                                    [int64(obj.params.componentSizes(obj.set, obj.instance)),1]);
           mixtureSample = zeros(int64(obj.params.mixtureSizes(obj.set, obj.instance)), 1);
           for mixSampleNum = 1: obj.params.mixtureSizes(obj.set, obj.instance)
               if binornd(1, obj.params.alphas(obj.set, obj.instance))
                   mixtureSample(mixSampleNum,1) = betarnd(obj.params.a1(obj.set),...
                                                           obj.params.b1(obj.set),[1,1]);
               else
                   mixtureSample(mixSampleNum,1) = betarnd(obj.params.a0(obj.set),...
                                                           obj.params.b0(obj.set),[1,1]);
               end
           end
           obj.updateIndexValues();
       end
       
       function [] = updateIndexValues(obj)
           if obj.instance == obj.instancesPerSet
               obj.instance = 1;
           else
               obj.instance = obj.instance + 1;
           end
           if obj.set == obj.numParamSets
               obj.set = 1;
           else
               obj.set = obj.set + 1;
           end
       end
       
       function [len] = getLength(obj)
          len = obj.numParamSets * obj.instancesPerSet; 
       end
   end
end